class Node {
  constructor(element) {
    this.data = element;
    this.next = null;
  }
}
​
class LinkedList {
  constructor() {
    this.head = null;
    this.length = 1;
  }
​
  //Add element to Linked List
  add(element) {
    console.log("add:");
    let node = new Node(element);
    let current;
    if (this.head === null) {
      this.head = node;
    } else {
      current = this.head;
      while (current.next !== null) {
        current = current.next;
      }
      current.next = node;
      this.length++;
    }
    this.printList();
  }
​
  // Add multiple at End in single time
  addMultiple(...arr) {
    console.log("addMultiple:");
    let i = 0; //We need to take care when list is full empty
    let temp = new Node(arr[i]);
    if (this.head === null) {
      this.head = temp;
      i++; //If empty then will add arr[0] to list and then other elements
    }
    let current = this.head;
    while (current.next !== null) {
      current = current.next;
    }
​
    for (; i < arr.length; i++) {
      let temp = new Node(arr[i]);
      current.next = temp;
      current = current.next;
      this.length++;
    }
    // this.printList();
  }
​
  //Print Linked-List
  printList() {
    let current = this.head;
    if (this.length === 0) {
      console.log("List is Empty");
    }
    let arr = [];
    while (current !== null) {
      arr.push(current.data);
      current = current.next;
    }
    console.log(...arr);
  }
​
  // Insert node at beginnging
  insertAtStart(el) {
    console.log("insertAtStart:");
    let current = new Node(el); // Creating new node to add at beginning
    current.next = this.head; //Setting new_node.next = head
    this.head = current; //Pointing our head to the new node which is our new start point
    this.length++; // We need to increase length also
    this.printList();
  }
​
  // Insert node at end
  insertAtEnd(el) {
    console.log("insertAtEnd:");
    let temp = new Node(el); //Creating new node
    let current = this.head; //We need to traverse through list till end
    while (current.next !== null) {
      //We need to go to end with help of current to add node at last
      current = current.next;
    }
    current.next = temp; //Once we reached at end then will assign temp to current.next = temp
    this.length++; // We need to increase length also
    this.printList();
  }
